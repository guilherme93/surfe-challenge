// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=actions
//

// Package actions is a generated GoMock package.
package actions

import (
	reflect "reflect"
	domain "surfe-actions/internal/actions/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CountActionsByUser mocks base method.
func (m *MockService) CountActionsByUser(userID int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActionsByUser", userID)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountActionsByUser indicates an expected call of CountActionsByUser.
func (mr *MockServiceMockRecorder) CountActionsByUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActionsByUser", reflect.TypeOf((*MockService)(nil).CountActionsByUser), userID)
}

// GetReferrals mocks base method.
func (m *MockService) GetReferrals() map[int]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferrals")
	ret0, _ := ret[0].(map[int]int)
	return ret0
}

// GetReferrals indicates an expected call of GetReferrals.
func (mr *MockServiceMockRecorder) GetReferrals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferrals", reflect.TypeOf((*MockService)(nil).GetReferrals))
}

// PredictNextActions mocks base method.
func (m *MockService) PredictNextActions(currentAction string) []domain.Prediction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredictNextActions", currentAction)
	ret0, _ := ret[0].([]domain.Prediction)
	return ret0
}

// PredictNextActions indicates an expected call of PredictNextActions.
func (mr *MockServiceMockRecorder) PredictNextActions(currentAction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictNextActions", reflect.TypeOf((*MockService)(nil).PredictNextActions), currentAction)
}
