// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CountActionsByUser mocks base method.
func (m *MockRepository) CountActionsByUser(userID int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActionsByUser", userID)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountActionsByUser indicates an expected call of CountActionsByUser.
func (mr *MockRepositoryMockRecorder) CountActionsByUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActionsByUser", reflect.TypeOf((*MockRepository)(nil).CountActionsByUser), userID)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() []Actions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]Actions)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// GetReferrals mocks base method.
func (m *MockRepository) GetReferrals() []Actions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferrals")
	ret0, _ := ret[0].([]Actions)
	return ret0
}

// GetReferrals indicates an expected call of GetReferrals.
func (mr *MockRepositoryMockRecorder) GetReferrals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferrals", reflect.TypeOf((*MockRepository)(nil).GetReferrals))
}
